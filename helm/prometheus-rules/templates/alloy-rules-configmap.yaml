{{- if eq .Values.managementCluster.provider.flavor "capi" }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-rules-config
  namespace: giantswarm
data:
  values: |
    networkPolicy:
      cilium:
        egress:
        - toEntities:
          - kube-apiserver
          - world
        - toEndpoints:
          - matchLabels:
              io.kubernetes.pod.namespace: kube-system
              k8s-app: coredns
          - matchLabels:
              io.kubernetes.pod.namespace: kube-system
              k8s-app: k8s-dns-node-cache
          toPorts:
          - ports:
            - port: "1053"
              protocol: UDP
            - port: "1053"
              protocol: TCP
            - port: "53"
              protocol: UDP
            - port: "53"
              protocol: TCP
        - toEndpoints:
          - matchLabels:
              app.kubernetes.io/component: ruler
              app.kubernetes.io/name: mimir
              io.kubernetes.pod.namespace: mimir
          toPorts:
          - ports:
            - port: "8080"
              protocol: TCP
        - toEndpoints:
          - matchLabels:
              app.kubernetes.io/component: backend
              app.kubernetes.io/name: loki
              io.kubernetes.pod.namespace: loki
          toPorts:
          - ports:
            - port: "3100"
              protocol: TCP
    alloy:
      alloy:
        configMap:
          content: |
            mimir.rules.kubernetes "local" {
              address = "http://mimir-ruler.mimir.svc:8080/"
              tenant_id = {{ .Values.metrics.tenant | quote }}
              rule_selector {
                  match_expression {
                    key = "application.giantswarm.io/prometheus-rule-kind"
                    operator = "NotIn"
                    values = ["loki"]
                  }
              }
            }
            loki.rules.kubernetes "local" {
              address = "http://loki-backend.loki.svc:3100/"
              tenant_id = {{ .Values.logs.tenant | quote }}
              rule_selector {
                  match_expression {
                    key = "application.giantswarm.io/prometheus-rule-kind"
                    operator = "In"
                    values = ["loki"]
                  }
              }
            }
      controller:
        type: "deployment"
        replicas: 1
      crds:
        create: false
    verticalPodAutoscaler:
      enabled: true
{{- end -}}
