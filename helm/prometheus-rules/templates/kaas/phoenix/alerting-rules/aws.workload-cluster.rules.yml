apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  creationTimestamp: null
  labels:
    {{- include "labels.common" . | nindent 4 }}
  name: aws.workload-cluster.rules
  namespace: {{ .Values.namespace  }}
spec:
  groups:
  - name: aws.workload-cluster
    rules:
    - alert: WorkloadClusterContainerIsRestartingTooFrequentlyAWS
      annotations:
        description: '{{`Container {{ $labels.container }} in pod {{ $labels.namespace }}/{{ $labels.pod }} is restarting too often.`}}'
        runbook_url: https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/container-is-restarting-too-often/
      ## TODO(@giantswarm/team-phoenix): Review this list once all vintage installations are gone
      expr: label_join(increase(kube_pod_container_status_restarts_total{container=~"aws-node.*|kiam-agent.*|kiam-server.*|ebs-(plugin|csi).*|aws-pod-identity-webhook.*"}[1h]), "service", "/", "namespace", "pod") > 10
      for: 10m
      labels:
        area: kaas
        cancel_if_outside_working_hours: "true"
        cancel_if_cluster_has_no_workers: "true"
        severity: page
        team: phoenix
        topic: kubernetes
    - alert: WorkloadClusterPodPendingAWS
      annotations:
        description: '{{`Pod {{ $labels.namespace }}/{{ $labels.pod }} is stuck in Pending.`}}'
        runbook_url: https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/pod-stuck-in-pending/
      ## TODO(@giantswarm/team-phoenix): Review this list once all vintage installations are gone
      expr: kube_pod_status_phase{namespace="kube-system",pod=~"(aws-node.*|kiam-agent.*|kiam-server.*|ebs-(plugin|csi).*)", phase="Pending"} == 1
      for: 15m
      labels:
        area: kaas
        cancel_if_outside_working_hours: "true"
        cancel_if_kube_state_metrics_down: "true"
        cancel_if_cluster_has_no_workers: "true"
        severity: page
        team: phoenix
