apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  creationTimestamp: null
  labels:
    {{- include "labels.common" . | nindent 4 }}
  name: core.storage.management-cluster.rules
  namespace: {{ .Values.namespace  }}
spec:
  groups:
  - name: core.storage.management-cluster
    rules:
    - alert: DockerVolumeSpaceTooLow
      annotations:
        description: '{{`Docker volume {{ $labels.mountpoint}} on {{ $labels.instance }} does not have enough free space.`}}'
        runbook_url: https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/low-disk-space/#docker-volume
      expr: node_filesystem_free_bytes{cluster_type="management_cluster", mountpoint=~"(/rootfs)?/var/lib/docker"} < (1.5 * 1024 * 1024 * 1024)
      for: 20m
      labels:
        area: kaas
        cancel_if_outside_working_hours: "true"
        severity: notify
        team: tenet
        topic: storage
    - alert: ContainerdVolumeSpaceTooLow
      annotations:
        description: '{{`Containerd volume /var/lib/containerd on {{ $labels.node }} does not have enough free space.`}}'
        runbook_url: https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/low-disk-space/#containerd-volume
      # See below comment for the KubeletVolumeSpaceTooLow alert regarding the node-problem-detector.
      # We are also alerted if the free space is less than 10% for 10 minutes.
      expr: (( 100 * (node_filesystem_free_bytes{cluster_type="management_cluster", mountpoint=~"(/rootfs)?/var/lib/containerd"} +1) / node_filesystem_size_bytes{cluster_type="management_cluster", mountpoint=~"(/rootfs)?/var/lib/containerd"} < 10) * on (node, cluster_type, cluster_id, installation, organization, pipeline, region, customer) (1 - problem_gauge{reason="ContainerdDiskIsFull"}) or sum ((100 * node_filesystem_free_bytes{cluster_type="management_cluster", mountpoint=~"(/rootfs)?/var/lib/containerd"} +1)/ node_filesystem_size_bytes{cluster_type="management_cluster", mountpoint=~"(/rootfs)?/var/lib/containerd"} < 10) by (node, cluster_type, cluster_id, installation, organization, pipeline, region, customer)) > 0
      for: 10m
      labels:
        area: kaas
        cancel_if_outside_working_hours: "true"
        severity: notify
        team: tenet
        topic: storage
    - alert: EtcdVolumeSpaceTooLow
      annotations:
        description: '{{`Etcd volume {{ $labels.mountpoint}} on {{ $labels.instance }} does not have enough free space.`}}'
        runbook_url: https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/low-disk-space/#etcd-volume
      expr: 100 * node_filesystem_free_bytes{cluster_type="management_cluster", mountpoint=~"(/rootfs)?/var/lib/etcd", provider!="eks"} / node_filesystem_size_bytes{cluster_type="management_cluster", mountpoint=~"(/rootfs)?/var/lib/etcd", provider!="eks"} < 10
      for: 10m
      labels:
        area: kaas
        cancel_if_outside_working_hours: {{ include "workingHoursOnly" . }}
        severity: page
        team: tenet
        topic: storage
    - alert: KubeletVolumeSpaceTooLow
      annotations:
        description: '{{`Kubelet volume /var/lib/kubelet on {{ $labels.node }} does not have enough free space.`}}'
        runbook_url: https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/low-disk-space/#kubelet-volume
      # In clusters where the node-problem-detector-app (https://github.com/giantswarm/node-problem-detector-app/) is installed, we don't want to get alerted if the node-problem-detector is already remediating the issue.
      # When this happens, the problem_gauge metric has value 1, so we do a multiply join on that metric - 1 to get 0 when the metric is present and active, and keep the series values that are > 0.
      # The right hand side of the or is necessary because we need to be alerted in clusters without the node-problem-detector.
      # Note that we add 1 to the disk free space so we still get alerted when the free bytes are 0.
      # We are also alerted if the free space is less than 1.5GB for 20 minutes.
      expr: (( node_filesystem_free_bytes{cluster_type="management_cluster",mountpoint=~"(/rootfs)?/var/lib/kubelet"} +1 < (1.5 * 1024 * 1024 * 1024)) * on (node, cluster_type, cluster_id, installation, organization, pipeline, region, customer) (1 - problem_gauge{reason="KubeletDiskIsFull"}) or sum (node_filesystem_free_bytes{cluster_type="management_cluster",mountpoint=~"(/rootfs)?/var/lib/kubelet"} +1 < (1.5 * 1024 * 1024 * 1024)) by (node, cluster_type, cluster_id, installation, organization, pipeline, region, customer)) > 0
      for: 20m
      labels:
        area: kaas
        cancel_if_outside_working_hours: "true"
        severity: notify
        team: tenet
        topic: storage
    - alert: LogVolumeSpaceTooLow
      annotations:
        description: '{{`Log volume /var/log on {{ $labels.node }} does not have enough free space.`}}'
        runbook_url: https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/low-disk-space/#log-volume
      # See above comment for the KubeletVolumeSpaceTooLow alert regarding the node-problem-detector.
      # We are also alerted if the free space is less than 10% for 30 minutes.
      expr: (( 100 * (node_filesystem_free_bytes{cluster_type="management_cluster", mountpoint=~"(/rootfs)?/var/log"} +1) / node_filesystem_size_bytes{cluster_type="management_cluster", mountpoint=~"(/rootfs)?/var/log"} < 10) * on (node, cluster_type, cluster_id, installation, organization, pipeline, region, customer) (1 - problem_gauge{reason="VarLogDiskIsFull"}) or sum ((100 * node_filesystem_free_bytes{cluster_type="management_cluster", mountpoint=~"(/rootfs)?/var/log"} +1)/ node_filesystem_size_bytes{cluster_type="management_cluster", mountpoint=~"(/rootfs)?/var/log"} < 10) by (node, cluster_type, cluster_id, installation, organization, pipeline, region, customer)) > 0
      for: 30m
      labels:
        area: kaas
        cancel_if_outside_working_hours: "true"
        severity: notify
        team: tenet
        topic: storage
    - alert: RootVolumeSpaceTooLow
      annotations:
        description: '{{`Root volume {{ $labels.mountpoint}} on {{ $labels.instance }} does not have enough free space.`}}'
        runbook_url: https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/low-disk-space/#root-volume
      expr: 100 * node_filesystem_free_bytes{cluster_type="management_cluster", mountpoint=~"(/rootfs)?/"} / node_filesystem_size_bytes{cluster_type="management_cluster", mountpoint=~"(/rootfs)?/"} < 10
      for: 10m
      labels:
        area: kaas
        cancel_if_outside_working_hours: "true"
        severity: notify
        team: tenet
        topic: storage
    - alert: PersistentVolumeSpaceTooLow
      annotations:
        description: '{{`Persistent volume {{ $labels.mountpoint}} on {{ $labels.instance }} does not have enough free space.`}}'
        runbook_url: https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/low-disk-space/#persistent-volume
      expr: |
        100 * (
          label_replace(
            (
                node_filesystem_free_bytes{cluster_type="management_cluster", mountpoint=~"(/rootfs)?/var/lib/kubelet.*"}
              /
                node_filesystem_size_bytes{cluster_type="management_cluster", mountpoint=~"(/rootfs)?/var/lib/kubelet.*"}
            ),
            "uid",
            "$1",
            "mountpoint",
            "/var/lib/kubelet/pods/([^/]+).*"
          )
          * on (uid) group_left (affected_pod, affected_namespace)
          label_replace(
            label_replace(
              kube_pod_info{cluster_type="management_cluster", pod!~"(alertmanager|loki|mimir|prometheus|pyroscope|tempo).*"},
              "affected_pod",
              "$1",
              "pod",
              "(.*)"
            ),
            "affected_namespace",
            "$1",
            "namespace",
            "(.*)"
          )
        ) < 10
      for: 10m
      labels:
        area: kaas
        cancel_if_outside_working_hours: "true"
        severity: notify
        team: tenet
        topic: storage
